# All in one ZSHRC
echo "[*] Loading Colors..."
# Reset
COL_RESET='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
echo -e "[${Green}*${COL_RESET}] Sucessfully applied ${Yellow}Regular Colors${COL_RESET}"
# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White
echo -e "[*] Sucessfully applied ${BYellow}Bold Colors${COL_RESET}"
# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White
echo -e "[*] Sucessfully applied ${UYellow}Underline Colors${COL_RESET}"
# Background
bg_Black='\033[40m'       # Black
bg_Red='\033[41m'         # Red
bg_Green='\033[42m'       # Green
bg_Yellow='\033[43m'      # Yellow
bg_Blue='\033[44m'        # Blue
bg_Purple='\033[45m'      # Purple
bg_Cyan='\033[46m'        # Cyan
bg_White='\033[47m'       # White
echo -e "[*] Sucessfully applied ${bg_White}${BYellow}Background Colors${COL_RESET}"

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White
echo -e "[*] Sucessfully applied ${IYellow}High Intensity Colors${COL_RESET}"
# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White
echo "[*] Sucessfully applied ${BIYellow}Bold High Intensity Colors${COL_RESET}"
# High Intensity backgrounds
bg_IBlack='\033[0;100m'   # Black
bg_IRed='\033[0;101m'     # Red
bg_IGreen='\033[0;102m'   # Green
bg_IYellow='\033[0;103m'  # Yellow
bg_IBlue='\033[0;104m'    # Blue
bg_IPurple='\033[0;105m'  # Purple
bg_ICyan='\033[0;106m'    # Cyan
bg_IWhite='\033[0;107m'   # White
echo "[*] Sucessfully applied ${bg_IWhite}${UBlack}High Intensity Background Colors${COL_RESET}"
export ZSH="$HOME/.oh-my-zsh"

CASE_SENSITIVE="false"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="false"

zstyle ':omz:update' mode auto

zstyle ':omz:update' frequency 1

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

DISABLE_LS_COLORS="false"

DISABLE_AUTO_TITLE="false"

ENABLE_CORRECTION="false"

COMPLETION_WAITING_DOTS="false"

DISABLE_UNTRACKED_FILES_DIRTY="false"

# man strftime
# HIST_STAMPS="mm/dd/yyyy"

echo "[*] Loading plugins..."
plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
  command-time
)
ZSH_COMMAND_TIME_MIN_SECONDS=1

ZSH_COMMAND_TIME_MSG="Time: %s"

ZSH_COMMAND_TIME_COLOR="white"

# Exclude some commands
ZSH_COMMAND_TIME_EXCLUDE=(vim mcedit)
source $ZSH/oh-my-zsh.sh

export ARCHFLAGS="-arch aarch64"
echo "[*] Loading Termux API Variables"
BATTERY_STATUS="$(termux-battery-status)"
BATTERY_PERCENTAGE="$(jq -r .percentage <<< $BATTERY_STATUS)"
WIFI_NETWORK="$(termux-wifi-connectioninfo)"


# make new bash files for neovim and include bash shebang
CRIS_NEWSHELL (){
  echo '#!/data/data/com.termux/files/usr/bin/bash' > $1.sh
  chmod +x $1.sh
  $EDITOR $1.sh
}
# easy ping
CRIS_PINGFUNC (){
  if [[ $1 == "" ]]; then
    ping -c 10 -i 0.2 8.8.8.8
  else
    ping -c 10 -i 0.2 $1
  fi
}
CRIS_RESETSSHD (){
	termux-wake-lock
	if [[ $1 == debug ]]; then 
	  while true; do
      sshd -dD | sleep 30000
	  done
  else
	while true; do
		sshd
	done
	fi
}
echo "[*] Loading alias"
alias zshrc="$EDITOR ~/.zshrc && omz reload"
alias ohmyzsh="cd ~/.oh-my-zsh"
# Changing "ls" to "exa"
alias ls='exa --icons --color=always --group-directories-first'
alias ll='exa -alF --icons --color=always --group-directories-first'
alias la='exa -a --icons --color=always --group-directories-first'
alias l='exa -F --icons --color=always --group-directories-first'
alias l.='exa -a | egrep "^\."'
alias ...="cd ../.."
alias newsh="CRIS_NEWSHELL"
alias rmall="rm -rf"
alias hi="echo 'Hello World'"
alias pong="CRIS_PINGFUNC $1"
alias mk="touch"
alias topen="termux-open"
alias topenurl="termux-open-url"
alias pshell="echo $0 | grep -oE --color=never 'bash|zsh|sh|fish|csh|ksh'"
alias bashrc="eval $EDITOR $PREFIX/etc/bash.bashrc && bash"
alias gcc15="clang-15"
alias gcc16="clang-16"
alias sl="sl -e"
echo "[*] Exporting variable"
export WHOAMI="$(whoami)"
export USER="$WHOAMI"
export ssh_config="$HOME/.ssh/config"
export EDITOR="nvim"
eval $(starship init zsh)
clear

echo -e "[${Green}*${COL_RESET}] Loaded .zshrc"
if [[ $SSH_CONNECTION != "" ]]; then
  echo "===[ YOURE CONNECTING WITH SSH CONNECTION ]==="
fi
if [[ $(tput cols) -gt 50 ]]; then
echo """   ___     _        _        _         __ ____ 
  / __|_ _(_)___ __| |_ _  _| |_ _  _ /  \__  | 
 | (__| '_| (_-</ _| ' \ || |  _| || | () |/ / 
  \___|_| |_/__/\__|_||_\_,_|\__|\_,_|\__//_/ 
""" | lolcat
else
echo """'     |         |       /~~\~~/
/~~|/~\|(~/~~|/~\|   |~|~|   ||    |/
\__|   |_)\__|   |\_/| |  \_/| \__//
""" | lolcat
fi
echo $BATTERY_PERCENTAGE 
case $BATTERY_PERCENTAGE in
	100) echo "${Yellow}Last battery percentage: ${BGreen}${BATTERY_PERCENTAGE}${Reset}";;
  99|9[0-9]) echo "${Yellow}Last battery percentage: ${Green}${BATTERY_PERCENTAGE}${Reset}";;
	89|[8-6][0-9]) echo "${Yellow}Last battery percentage: ${BYellow}${BATTERY_PERCENTAGE}${Reset}";;
	59|[5-2][0-9]) echo "${Red}Last battery percentage: ${Yellow}${BATTERY_PERCENTAGE}${Reset}";;
  20|[2-1][0-9]) echo "${Green}Last battery percentage: ${Red}${BATTERY_PERCENTAGE}${Reset}";;
	[9-1]) echo "${Green}Last battery percentage: ${BRed}${BATTERY_PERCENTAGE}${Reset}";;
	*) echo "${Yellow}Last battery percentage: ${Green}NaN${Reset}";;
esac

