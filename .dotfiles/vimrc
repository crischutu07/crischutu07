" let g:airline#extensions#tabline#formatter = 'default'Import Plugins (Vundle)
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"" Plugin 'file:///data/data/com.termux/files/home/.vim/plugged/'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" "
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" Import Plugins
call plug#begin('~/.vim/plugged')
Plug 'ap/vim-css-color'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim' " Emmet 
Plug 'ycm-core/YouCompleteMe'
Plug 'skywind3000/vim-dict'
Plug 'skywind3000/vim-auto-popmenu'
Plug 'sonph/onehalf', { 'rtp': 'vim' } " Scheme Background and syntax highlight
Plug 'mhinz/vim-tree'
Plug 'vim-scripts/AutoComplPop'
Plug 'kien/ctrlp.vim'
" Language Server
Plug 'mattn/vim-lsp-settings'
" Auto Complete
" LSP
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'keremc/asyncomplete-clang.vim'
Plug 'prabirshrestha/asyncomplete-emmet.vim'
Plug 'prabirshrestha/asyncomplete-emoji.vim'
Plug 'prabirshrestha/asyncomplete-flow.vim'
Plug 'prabirshrestha/asyncomplete-necosyntax.vim'
Plug 'prabirshrestha/asyncomplete-necovim.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

call plug#end()
" Basic config
colorscheme onehalfdark
let g:apc_enable_ft = 1
set encoding=utf-8
set nu
let g:airline#extensions#tabline#enabled = 1
" Tab and Space indentcation
set tabstop=2
set shiftwidth=2
set softtabstop=0 noexpandtab
set shortmess=at
set nostartofline
set virtualedit=all
let g:apc_cr_confirm = 1
" Auto Completion Pop up
cnoreabbrev sc ShellCheck
cnoreabbrev pkg PlugInstall
cnoreabbrev tree Tree
set completeopt=menuone,longest
"Some code bruh
" AsyncComplete tab
let g:asyncomplete_auto_popup = 1
inoremap <expr> <S-Tab>pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>pumvisible() ? asyncomplete#close_popup() : "\<cr>"
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<CR>"
nnoremap <silent> <C-c> :<C-u>normal! 0w<CR>

let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/.vim/global_extra_conf.py'

" enable this plugin for filetypes, '*' for all files.
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}

" source for dictionary, current or other loaded buffers, see ':help cpt'
set cpt=.,k,w,b

" don't select the first item.
set completeopt=menu,menuone,noselect

" suppress annoy messages.
set shortmess+=c
let g:apc_enable = 0
let g:ycm_filetype_blacklist = {'text':1, 'markdown':1, 'php':1}
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}
